name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up virtual environment
      run: uv sync

    - name: Run import tests
      run: uv run python test_imports.py

    - name: Run message splitter tests
      run: uv run python test_message_splitter.py

    - name: Run database tests
      run: uv run python test_database.py

    - name: Run integration tests
      run: uv run python test_integration.py

    - name: Run config tests
      run: uv run python test_config.py

    - name: Run API tests
      run: uv run python test_api.py

    - name: Run requirements verification
      run: uv run python test_requirements_verification.py

    - name: Run final verification
      run: uv run python test_final_verification.py

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up virtual environment
      run: uv sync

    - name: Check code formatting with ruff
      run: |
        uv add --dev ruff
        uv run ruff check .
      continue-on-error: true

    - name: Check code formatting with black
      run: |
        uv add --dev black
        uv run black --check .
      continue-on-error: true

  docker-build:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: mimi2:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm mimi2:latest python --version

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up virtual environment
      run: uv sync

    - name: Run security audit
      run: |
        uv add --dev safety
        uv run safety check
      continue-on-error: true

    - name: Run bandit security linter
      run: |
        uv add --dev bandit
        uv run bandit -r . -f json
      continue-on-error: true